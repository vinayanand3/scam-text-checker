document.addEventListener('DOMContentLoaded', () => {
    // Get references to all the necessary HTML elements
    const checkButton = document.getElementById('check-button');
    const textInput = document.getElementById('text-input');
    const resultSection = document.getElementById('result-section');
    const resultTitle = document.getElementById('result-title');
    const resultExplanation = document.getElementById('result-explanation');
    const loader = document.getElementById('loader');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');

    // Attach a click event listener to the "Analyze Text" button
    checkButton.addEventListener('click', async () => {
        const messageText = textInput.value;

        // --- UI State Management ---
        // Hide previous results and errors
        resultSection.classList.add('hidden');
        errorMessage.classList.add('hidden');
        
        // Validate input
        if (!messageText.trim()) {
            showError("Please paste some text into the box before analyzing.");
            return;
        }

        // Show the loader while we process the request
        loader.classList.remove('hidden');
        checkButton.disabled = true; // Disable button to prevent multiple clicks
        checkButton.textContent = "Analyzing...";

        // --- API Call Logic ---
        try {
            // Construct a detailed prompt for the AI model
            const prompt = `
                Analyze the following text message to determine if it is a scam. 
                Your response should be in two parts, separated by "|||".
                
                Part 1: A one or two-word verdict. Choose from: "Likely Scam", "Potential Scam", "Likely Safe", or "Uncertain".
                
                Part 2: A brief, clear explanation for your verdict, highlighting the red flags or reassuring signs. Explain it simply for a non-technical user.

                Here is the text to analyze:
                "${messageText}"
            `;

            // This is the function that calls the Gemini API
            const aiResponse = await callGemini(prompt);

            // Parse the response from the AI
            const [verdict, explanation] = aiResponse.split('|||');

            // Update the UI with the results
            if (verdict && explanation) {
                displayResult(verdict.trim(), explanation.trim());
            } else {
                // Handle cases where the AI response isn't in the expected format
                displayResult("Analysis Incomplete", "The AI response was not in the expected format. Here is the raw response: " + aiResponse);
            }

        } catch (error) {
            // Show a user-friendly error message if the API call fails
            console.error("Error calling Gemini API:", error);
            showError("Could not analyze the text. Please check your connection and try again.");
        } finally {
            // --- UI Cleanup ---
            // Hide the loader and re-enable the button regardless of success or failure
            loader.classList.add('hidden');
            checkButton.disabled = false;
            checkButton.textContent = "Analyze Text";
        }
    });

    /**
     * Calls the Gemini API to generate content based on a prompt.
     * @param {string} prompt The prompt to send to the model.
     * @returns {Promise<string>} The text generated by the model.
     */
    async function callGemini(prompt) {
        // NOTE: The API key is left as an empty string. The environment will handle authentication.
        const apiKey = ""; 
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

        const payload = {
            contents: [{
                role: "user",
                parts: [{ text: prompt }]
            }]
        };

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            throw new Error(`API request failed with status ${response.status}`);
        }

        const result = await response.json();

        // Navigate through the response structure to get the generated text
        if (result.candidates && result.candidates.length > 0 &&
            result.candidates[0].content && result.candidates[0].content.parts &&
            result.candidates[0].content.parts.length > 0) {
            return result.candidates[0].content.parts[0].text;
        } else {
            throw new Error("Invalid response structure from API.");
        }
    }

    /**
     * Displays the analysis result in the UI.
     * @param {string} verdict The main conclusion (e.g., "Likely Scam").
     * @param {string} explanation The detailed reason for the verdict.
     */
    function displayResult(verdict, explanation) {
        resultTitle.textContent = verdict;
        resultExplanation.textContent = explanation;

        // Change the color of the title based on the verdict for better visual feedback
        resultTitle.classList.remove('text-red-400', 'text-yellow-400', 'text-green-400', 'text-slate-300');
        if (verdict.includes('Scam')) {
            resultTitle.classList.add('text-red-400');
        } else if (verdict.includes('Safe')) {
            resultTitle.classList.add('text-green-400');
        } else if (verdict.includes('Potential')) {
             resultTitle.classList.add('text-yellow-400');
        } else {
             resultTitle.classList.add('text-slate-300');
        }

        resultSection.classList.remove('hidden');
    }
    
    /**
     * Displays an error message in the UI.
     * @param {string} message The error message to show.
     */
    function showError(message) {
        errorText.textContent = message;
        errorMessage.classList.remove('hidden');
    }
});
